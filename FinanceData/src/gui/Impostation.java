/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import logic.Setup;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Alessandro
 */
public class Impostation extends javax.swing.JFrame {

    /**
     * Creates new form Impostation
     */
    public Impostation() {        
        this.chooser = new JFileChooser();
        this.chooser.setDialogTitle("Apri");
        
        this.setup = new Setup();
        
        initComponents();                
        this.loadDatas();
        
        this.setLocation(650, 200);
    }

    private void loadDatas() {
        BufferedReader buffer = null;
        try {
            buffer = new BufferedReader(new FileReader(System.getProperty("user.dir") + "/Setup.json"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String line = null;
        try {
            line = buffer.readLine();
        } catch (IOException ex) {
            Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (line != null) {
            JSONObject obj = null;
            try {
                obj = new JSONObject(line);
            } catch (JSONException ex) {
                Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);
            }
                 
            try {
                this.pathDatabase.setText(obj.getString("path_database"));
            } catch (JSONException ex) {
                Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);            
            }
            try {
                this.setup.initDatabase(obj.getString("path_database"));
            } catch (JSONException ex) {
                Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ok = new javax.swing.JButton();
        selectDb = new javax.swing.JButton();
        databaseMsg = new javax.swing.JLabel();
        pathDatabase = new javax.swing.JTextField();
        createDatabase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Impostazioni");
        setFocusable(false);
        setPreferredSize(new java.awt.Dimension(600, 300));

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        selectDb.setText("Database");
        selectDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDbActionPerformed(evt);
            }
        });

        databaseMsg.setText("Database:");

        pathDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathDatabaseActionPerformed(evt);
            }
        });

        createDatabase.setText("Crea database");
        createDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ok)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(databaseMsg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pathDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectDb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDb)
                    .addComponent(databaseMsg)
                    .addComponent(pathDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(ok)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Metodo per la programmazione del tasto Ok.
     * 
     * @param evt 
     */
    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        setup.setDatabase();
        
        // Chiudere la finestra 
    }//GEN-LAST:event_okActionPerformed

    /**
     * Metodo per la programmazione per selezionare il path del databade.
     * 
     * @param evt 
     */
    private void selectDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDbActionPerformed
        int nFine = 0;
        nFine = chooser.showOpenDialog(this);        
        if (nFine == JFileChooser.APPROVE_OPTION) {            
            this.pathDatabase.setText(chooser.getSelectedFile().getAbsolutePath());
        } 
        
        this.setup.initDatabase(chooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_selectDbActionPerformed

    private void pathDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathDatabaseActionPerformed
        this.setup.setDatabase();
    }//GEN-LAST:event_pathDatabaseActionPerformed

    /**
     * Metodo per la programmazione per la creazione di un nuovo database.
     * 
     * @param evt 
     */
    private void createDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseActionPerformed
        int nFine = 0;
        nFine = chooser.showSaveDialog(this);
        if (nFine == JFileChooser.APPROVE_OPTION) {            
            try {
//              Settare il campo di testo con il path assoluto del database                
                this.pathDatabase.setText(chooser.getSelectedFile().getAbsolutePath());                        

//              Creazione del nuovo database                
                chooser.getSelectedFile().createNewFile();
                
//              Creazione dell'istanze database al nuovo file appena creato                
                this.setup.initDatabase(chooser.getSelectedFile().getAbsolutePath());                
            } catch (IOException ex) {
                Logger.getLogger(Impostation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }         
    }//GEN-LAST:event_createDatabaseActionPerformed

    public String getDatabasePath() {
        return pathDatabase.getSelectedText();         
    }
    
    
    private Setup setup;
    private JFileChooser chooser;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createDatabase;
    private javax.swing.JLabel databaseMsg;
    private javax.swing.JButton ok;
    private javax.swing.JTextField pathDatabase;
    private javax.swing.JButton selectDb;
    // End of variables declaration//GEN-END:variables

}
